---
// src/pages/index.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCalendarEvents } from '../lib/calendar';
import { parseRRule } from '../lib/rruleParser';
import he from 'he';

export async function getStaticPaths() {
  const events = await getCalendarEvents();

  return {
    paths: events.map(event => ({ params: { id: event.id } })),
    fallback: 'blocking', // Blocking fallback for ISR
    revalidate: 60, // Revalidate every 60 seconds
  };
}

const events = await getCalendarEvents();

function generateGoogleMapsLink(location) {
  return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(location)}`;
}

function decodeHtml(html) {
  return he.decode(html);
}

function formatDate(dateString) {
  const options = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
}

function isToday(dateString) {
  const eventDate = new Date(dateString);
  const today = new Date();
  return (
    eventDate.getDate() === today.getDate() &&
    eventDate.getMonth() === today.getMonth() &&
    eventDate.getFullYear() === today.getFullYear()
  );
}
---

<BaseLayout title="Upcoming Events">
  {events.map((event) => (
    <div 
      data-event
      key={event.id} 
      class={isToday(event.start.dateTime || event.start.date) ? 'today-event' : ''}
    >
      {isToday(event.start.dateTime || event.start.date) && <div class="today">TODAY!</div>}
      <h2>{event.summary}</h2>
      <p set:html={decodeHtml(event.description || '')}></p>
      {event.recurrence && (
        <p><strong>Recurrence:</strong> {event.recurrence.map(rrule => parseRRule(rrule)).join(', ')}</p>
      )}
      <p><strong>Next Date:</strong> {formatDate(event.start.dateTime || event.start.date)}</p>

      {event.location && (
        <p>
          <strong>Location:</strong> {event.location} 
          <a href={generateGoogleMapsLink(event.location)} target="_blank" rel="noopener noreferrer"> (View on Google Maps)</a>
        </p>
      )}
    </div>
  ))}
</BaseLayout>