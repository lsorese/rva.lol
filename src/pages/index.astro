---
// src/pages/index.astro
import BaseLayout from '../layouts/BaseLayout.astro';
import { getCalendarEvents } from '../lib/calendar';
import { RRule, RRuleSet } from 'rrule';
import pkg from 'rrule';
const {rrulestr} = pkg;
import he from 'he';

export async function getStaticPaths() {
  const events = await getCalendarEvents();

  return {
    paths: events.map(event => ({ params: { id: event.id } })),
    fallback: 'blocking',
    revalidate: 60,
  };
}

const events = await getCalendarEvents();

function generateGoogleMapsLink(location) {
  return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(location)}`;
}

function decodeHtml(html) {
  return he.decode(html);
}

function formatDate(dateString) {
  const options = { year: 'numeric', month: 'long', day: 'numeric' };
  return new Date(dateString).toLocaleDateString(undefined, options);
}

function isToday(dateString) {
  const eventDate = new Date(dateString);
  const today = new Date();
  return (
    eventDate.getDate() === today.getDate() &&
    eventDate.getMonth() === today.getMonth() &&
    eventDate.getFullYear() === today.getFullYear()
  );
}

function formatRecurrence(rrule) {
  const rule = rrulestr(rrule);
  return rule.toText(); // Returns a human-readable description of the recurrence rule
}

function capitalizeFirstLetter(string) {
  if (!string) return ''; // Handle empty or undefined string
  return string.charAt(0).toUpperCase() + string.slice(1);
}
---

<BaseLayout title="Upcoming Events">
  <h1>Open Mics:</h1>
  <a data-add href="https://calendar.google.com/calendar/embed?src=b3d8d5b621d0840f0266cfbcfaaaeb06986e135975d1bc7d73eb74d5edfeaa9f%40group.calendar.google.com&ctz=America%2FNew_York" target="_blank">Add these events to your calendar -></a>
  {events.map((event) => {
    const eventStart = event.start.dateTime || event.start.date;
    return (
      <div 
        data-event
        key={event.id} 
        class={isToday(eventStart) ? 'today-event' : ''}
      >
        {isToday(eventStart) && <div class="today">TODAY!</div>}
        <h2>{event.summary}<br /><small>{formatDate(eventStart)}</small></h2>
        {event.recurrence && (
          <h3>{capitalizeFirstLetter(event.recurrence.map(rrule => formatRecurrence(rrule)).join(', '))}
          </h3>
        )}
        <p set:html={decodeHtml(event.description || '')}></p>

        {event.location && (
          <p>
            <strong>Location:</strong> {event.location}<br />
            <a href={generateGoogleMapsLink(event.location)} target="_blank" rel="noopener noreferrer">(View on Google Maps) -></a>
          </p>
        )}
      </div>
    );
  })}
</BaseLayout>